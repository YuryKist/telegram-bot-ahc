# import_Bitrix.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏ –∏–∑ Bitrix –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –†–µ–µ—Å—Ç—Ä–∞ –ê–•–ß.
–û–∂–∏–¥–∞–µ—Ç –¥–≤–∞ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- *–†–µ–µ—Å—Ç—Ä –ê–•–ß*.xlsx ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä
- *Bitrix*.xlsx ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å
–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.
"""

import re
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.cell import MergedCell
from loguru import logger
from import_1C import update_excel_file as update_excel_file
from import_1C import load_ahx_data as load_ahx_data
from import_1C import prepare_register as prepare_register
from import_1C import update_date_payment as update_date_payment



def load_bitrix(directory_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç df_bitrix –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
    directory = Path(directory_path)
    excel_files_bitrix = list(directory.glob('*Bitrix*.xls*'))

    if not excel_files_bitrix:
        logger.error("–§–∞–π–ª —Å 'Bitrix' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        raise FileNotFoundError("‚ùå –§–∞–π–ª —Å 'Bitrix' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    
    logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª Bitrix: {excel_files_bitrix[0].name}")

    dtypes = {
#        'ID': str,
        '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞': str,
        '–°—É–º–º–∞': str,
        '–î–∞—Ç–∞ —Å—á–µ—Ç–∞': 'datetime64[ns]',
        '–°—Ç–∞—Ç—É—Å –°—á–µ—Ç–∞': str,
    }
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Bitrix
    df_bitrix = pd.read_excel(
        excel_files_bitrix[0],  # –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª ‚Äî –Ω—É–∂–Ω—ã–π
#        names = columns,
        dtype=dtypes,
        engine='openpyxl'
    )
    
    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_bitrix)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ Bitrix.")

    return df_bitrix

def extract_task_id(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –∏–∑ —Å—Å—ã–ª–∫–∏"""
    match = re.search(r'/view/(\d+)/?$', url)
    if match:
        return match.group(1)
    return None


def prepare_bitrix(df_bitrix):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID, –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤, –∑–∞–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤."""
    logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Bitrix")
    df_bitrix = df_bitrix.copy()

    df_bitrix = df_bitrix.rename(columns={
        df_bitrix.columns[0]: 'ID',
        df_bitrix.columns[1]: 'Things',
        df_bitrix.columns[2]: 'Recierver',
        '–û–±—ä–µ–∫—Ç': 'Object'
        })

    
    # –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_changes = {
        '–û–ø–ª–∞—á–µ–Ω': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ 1–°',
        '–ü–µ—Ä–µ–¥–∞–Ω –≤ –æ–ø–ª–∞—Ç—É': '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
    }
    df_bitrix['–°—Ç–∞—Ç—É—Å –°—á–µ—Ç–∞'] = df_bitrix['–°—Ç–∞—Ç—É—Å –°—á–µ—Ç–∞'].replace(status_changes)

     # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ –∏–∑ —Å—Å—ã–ª–∫–∏
    logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á –∏–∑ —Å—Å—ã–ª–æ–∫")
    df_bitrix['ID task'] = (
        df_bitrix.loc[df_bitrix['–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É'].notna(), '–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É']
        .astype("string")
        .apply(extract_task_id)
    )
    df_bitrix['ID task'] = pd.to_numeric(df_bitrix['ID task'], errors='coerce').astype(dtype = int, errors = 'ignore')
    df_bitrix['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞'] = df_bitrix['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞'].astype("string").str.lstrip('0')
    df_bitrix['–°—É–º–º–∞'] = pd.to_numeric(df_bitrix['–°—É–º–º–∞'], errors='coerce').round(2)
    df_bitrix.columns = ['ID'] + list(df_bitrix.columns[1:])
    df_bitrix['ID'] = pd.to_numeric(df_bitrix['ID'], errors='coerce').astype('Int32')

    task_ids_count = df_bitrix['ID task'].notna().sum()
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {task_ids_count} ID –∑–∞–¥–∞—á –∏–∑ —Å—Å—ã–ª–æ–∫")
    
    logger.success("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.")
    return df_bitrix


def preprocess_bitrix_data(df_bitrix):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    logger.info("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Bitrix")
    df_bitrix = df_bitrix.rename(columns={
        '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞': '‚Ññ —Å—á–µ—Ç–∞',
        '–°—Ç–∞—Ç—É—Å –°—á–µ—Ç–∞': '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å',
        'ID task': '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'
    })
    
    before_dedup = len(df_bitrix)
    df_bitrix = df_bitrix.drop_duplicates(subset=['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å', '–°—É–º–º–∞'])
    after_dedup = len(df_bitrix)
    
    removed_duplicates = before_dedup - after_dedup
    if removed_duplicates > 0:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    logger.success(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df_bitrix)}")

    return df_bitrix


def fill_invoice_numbers_from_bitrix(df_register, df_bitrix):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç ‚Ññ —Å—á–µ—Ç–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ ‚Ññ –∑–∞–¥–∞—á–∏ –∏ —Å—É–º–º–µ."""
    logger.info("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ –∏–∑ Bitrix")
    
    if '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å' not in df_register.columns:
        logger.error("–í —Ä–µ–µ—Å—Ç—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'")
        raise KeyError("‚ùå –í —Ä–µ–µ—Å—Ç—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'.")

    df_bitrix_rize = df_bitrix[['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å', '–°—É–º–º–∞', '‚Ññ —Å—á–µ—Ç–∞']].copy()
    df_bitrix_deduplicated = df_bitrix_rize.drop_duplicates(subset=['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å', '–°—É–º–º–∞'])

    df_register = df_register.merge(
        df_bitrix_deduplicated,
        on=['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å', '–°—É–º–º–∞'],
        how='left',
        suffixes=('', '_bitrix')
    )

    df_register['‚Ññ —Å—á–µ—Ç–∞'] = df_register['‚Ññ —Å—á–µ—Ç–∞'].replace('', pd.NA)
   
    fill_condition = df_register['‚Ññ —Å—á–µ—Ç–∞'].isna() & df_register['‚Ññ —Å—á–µ—Ç–∞_bitrix'].notna()
    df_register.loc[fill_condition, '‚Ññ —Å—á–µ—Ç–∞'] = df_register.loc[fill_condition, '‚Ññ —Å—á–µ—Ç–∞_bitrix']

    # –£–¥–∞–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
    df_register = df_register.drop('‚Ññ —Å—á–µ—Ç–∞_bitrix', axis=1)
    df_register['‚Ññ —Å—á–µ—Ç–∞'] = df_register['‚Ññ —Å—á–µ—Ç–∞'].fillna('')
 
    updated_count = fill_condition.sum()
    if updated_count > 0:
        logger.success(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ {updated_count} –Ω–æ–º–µ—Ä–æ–≤ —Å—á—ë—Ç–æ–≤ –∏–∑ Bitrix")

    return df_register


def update_register_payment_status_bitrix(df_register, df_bitrix):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Bitrix."""
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ Bitrix")
    
    df_bitrix_mapped = df_bitrix[['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞', '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å']].copy()
    df_bitrix_deduplicated = df_bitrix_mapped.drop_duplicates(subset=['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞'])

    df_merged = df_register.merge(
        df_bitrix_deduplicated,
        on=['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞'],
        how='left',
        suffixes=('', '_bitrix')
    )

    df_register = df_register.copy()
    match_condition = df_merged['–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å'].notna() & (~df_register['–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'].isin(["–û–ø–ª–∞—á–µ–Ω–æ", "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"]))
    df_register.loc[match_condition, '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'] = df_merged.loc[match_condition, '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å']

    updated_count = match_condition.sum()
    if updated_count > 0:
        logger.success(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã")

    return df_register

def clean_text_from_stop_words_precise(text, stop_words):
    if pd.isna(text):
        return text
    
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned_text = str(text).lower()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    pattern = r'\b(?:' + '|'.join(re.escape(word.lower()) for word in stop_words) + r')\b'
    # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    cleaned_text = re.sub(pattern, '', cleaned_text)
    
    # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text).strip()
    
    return cleaned_text


def update_register_id_payment_object_bitrix(df_register, df_bitrix):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç ID –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç."""
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –æ–ø–ª–∞—Ç—ã –¢–ú–¶ –û–±—ä–µ–∫—Ç –∏–∑ Bitrix")
    
    df_bitrix_mapped = df_bitrix[['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞', 'ID', 'Object', 'Things']].copy()
    df_bitrix_deduplicated = df_bitrix_mapped.drop_duplicates(subset=['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞'])

    df_merged = df_register.merge(
        df_bitrix_deduplicated,
        on=['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞'],
        how='left',
        suffixes=('', '_bitrix')
    )
       
        # –û–±–Ω–æ–≤–ª—è–µ–º –û–±—ä–µ–∫—Ç
    match_condition = df_merged['Object'].notna() & df_register['–û–±—ä–µ–∫—Ç'].isna()
    df_register = df_register.copy()
    df_register.loc[match_condition, '–û–±—ä–µ–∫—Ç'] = df_merged.loc[match_condition, 'Object']

    updated_count = match_condition.sum()
    if updated_count > 0:
        logger.success(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –û–±—ä–µ–∫—Ç–æ–≤")

    # –û–±–Ω–æ–≤–ª—è–µ–º ID
    match_condition = df_merged['ID'].notna() & df_register['ID_–°—á–µ—Ç_Bitrix'].isna()
    df_register = df_register.copy()
    df_register.loc[match_condition, 'ID_–°—á–µ—Ç_Bitrix'] = df_merged.loc[match_condition, 'ID']

    updated_count = match_condition.sum()
    if updated_count > 0:
        logger.success(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} ID –æ–ø–ª–∞—Ç—ã")

    # –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    stop_words = ['c—á–µ—Ç', '—Ä–∞—Å—Ö–æ–¥—ã', 'c—á–µ—Ç–∞', '—Ä–∞—Å—Ö–æ–¥–æ–≤', '–∞—Ö—á']

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫ —Å—Ç–æ–ª–±—Ü—É Object –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    df_merged['Things'] = df_merged['Things'].apply(lambda x: clean_text_from_stop_words_precise(x, stop_words))

    # –û–±–Ω–æ–≤–ª—è–µ–º TMC
    match_condition = df_merged['Things'].notna() & df_register['–¢–ú–¶'].isna()
    df_register = df_register.copy()
    df_register.loc[match_condition, '–¢–ú–¶'] = df_merged.loc[match_condition, 'Things']

    updated_count = match_condition.sum()
    if updated_count > 0:
        logger.success(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã")

    return df_register


def update_register_id_task_bitrix(df_register, df_bitrix):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç ‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç."""
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –∑–∞–¥–∞—á –∏–∑ Bitrix")
    
    df_bitrix_mapped = df_bitrix[['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞', '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å']].copy()
    df_bitrix_deduplicated = df_bitrix_mapped.drop_duplicates(subset=['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞'])

    df_merged = df_register.merge(
        df_bitrix_deduplicated,
        on=['‚Ññ —Å—á–µ—Ç–∞', '–°—É–º–º–∞'],
        how='left',
        suffixes=('', '_bitrix')
    )

    df_register['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'] = df_register['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'].replace('', pd.NA)
    df_register = df_register.copy()
    mask = df_register['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'].isna() & df_merged['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å_bitrix'].notna()
    df_register.loc[mask, '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'] = df_merged.loc[mask, '‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å_bitrix']
    df_register['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'] = df_register['‚Ññ –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å'].fillna('')

    updated_count = mask.sum()
    if updated_count > 0:
        logger.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {updated_count} –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –∏–∑ Bitrix")

    return df_register


def replace_nan_in_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    logger.info("–û—á–∏—Å—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π –≤ DataFrame")
    df_clean = df.copy()
    for col in df_clean.columns:
        if df_clean[col].dtype == 'object':
            df_clean[col] = df_clean[col].fillna("")
        else:
            # df_clean[col] = df_clean[col].fillna(0)
            pass

    logger.success("–û—á–∏—Å—Ç–∫–∞ NaN –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    return df_clean

def run_pipeline(directory_path: str) -> str:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–ø–∏—Å–∫–∏ –∏–∑ Bitrix –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ê–•–ß.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram-–±–æ—Ç–∞.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {directory_path}")
        df_bitrix = load_bitrix(directory_path)
        df_register, output_file_path = load_ahx_data(directory_path)      

        df_bitrix_clean = prepare_bitrix(df_bitrix)
        df_register_clean = prepare_register(df_register)
        df_bitrix_prepared = preprocess_bitrix_data(df_bitrix_clean)
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞: {output_file_path}")

        df_register_filled = fill_invoice_numbers_from_bitrix(df_register_clean, df_bitrix_prepared)
        df_register_updated = update_register_payment_status_bitrix(df_register_filled, df_bitrix_prepared)
        df_register_updated = update_register_id_payment_object_bitrix(df_register_updated, df_bitrix_prepared)
        df_register_updated  = update_date_payment(df_register_updated)
        df_register_final = update_register_id_task_bitrix(df_register_updated, df_bitrix_prepared)

        df_register_updated = replace_nan_in_dataframe(df_register_final)

        success = update_excel_file(output_file_path, df_register_updated)

        if success:
            logger.success("–î–∞–Ω–Ω—ã–µ –∏–∑ Bitrix —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –†–µ–µ—Å—Ç—Ä–µ –ê–•–ß")
            return "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Bitrix —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –†–µ–µ—Å—Ç—Ä–µ –ê–•–ß."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {success}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞."

    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return str(e)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add("Bitrix_import.log", rotation="10 MB", level="INFO", encoding="utf-8")
logger.add(lambda msg: print(msg, end=''), level="INFO")

# --- –î–ª—è —Ç–µ—Å—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ---
if __name__ == "__main__":
    directory_path = r"C:\Users\–Æ—Ä–∏–π –ö–∏—Å—Ç–µ–Ω–µ–≤\Desktop\ACH_manager\record"
#    directory_path = r"C:\Users\–Æ—Ä–∏–π –ö–∏—Å—Ç–µ–Ω–µ–≤\Desktop\ACH_manager\record"
    result = run_pipeline(directory_path)
    print(result)