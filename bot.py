import os
import shutil
import tempfile
from pathlib import Path

from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from loguru import logger

from import_1C import run_pipeline as run_1c_pipeline
from import_Bitrix import run_pipeline as run_bitrix_pipeline
from import_invoice import run_pipeline as run_invoice_pipeline

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add("bot_logs.log", rotation="10 MB", level="DEBUG")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
UPLOAD_REGISTRY, MENU, UPLOAD_FILE = range(3)

# –ú–µ–Ω—é
reply_keyboard = [
    ['–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ 1–°'],
    ['–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç –∏–∑ Bitrix'],
    ['–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å—á—ë—Ç (PDF)'],
    ['–í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –ê–•–ß'],
    ['–û—Ç–º–µ–Ω–∞']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
done_keyboard = [['/done']]
markup_done = ReplyKeyboardMarkup(done_keyboard, resize_keyboard=True)


# –î–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, –≥–¥–µ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
SINGLE_FILE_ACTIONS = {
    '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ 1–°',
    '–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç –∏–∑ Bitrix'
}

# –ú–µ–Ω—è–µ–º prompts ‚Äî –Ω–µ –Ω—É–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å /done –¥–ª—è Excel
prompts = {
    '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ 1–°': "–û—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –≤—ã–ø–∏—Å–∫–æ–π –∏–∑ 1–°.",
    '–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç –∏–∑ Bitrix': "–û—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –æ—Ç—á—ë—Ç–æ–º –∏–∑ Bitrix.",
    '–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å—á—ë—Ç (PDF)': "–û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª(—ã) —Å–æ —Å—á—ë—Ç–æ–º. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
}


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# =================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

async def start(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª *–†–µ–µ—Å—Ç—Ä –ê–•–ß* (Excel).",
        parse_mode="Markdown"
    )
    return UPLOAD_REGISTRY


async def registry_received(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = update.message.document

    if not file or not file.file_name.lower().endswith('.xlsx'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel-—Ñ–∞–π–ª (.xlsx).")
        return UPLOAD_REGISTRY

    temp_dir = Path(tempfile.mkdtemp())
    user_data[user_id] = {'temp_dir': temp_dir}


    new_file = await file.get_file()
    file_path = temp_dir / file.file_name
    await new_file.download_to_drive(file_path)
    logger.info(f"–§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")


    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    return MENU


async def menu_choice(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    choice = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª: {choice}")

    if choice in prompts:
        user_data[user_id]['current_action'] = choice

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª (Excel), –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ì–æ—Ç–æ–≤–æ"
        if choice in SINGLE_FILE_ACTIONS:
            await update.message.reply_text(prompts[choice])
            return UPLOAD_FILE
        else:
            # –î–ª—è PDF ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
            markup = ReplyKeyboardMarkup([['–ì–æ—Ç–æ–≤–æ']], resize_keyboard=True)
            await update.message.reply_text(prompts[choice], reply_markup=markup)
            return UPLOAD_FILE

    elif choice == '–í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –ê–•–ß':
        temp_dir = user_data[user_id]['temp_dir']
        registry_files = list(temp_dir.glob("*—Ä–µ–µ—Å—Ç—Ä*–∞—Ö—á*.xlsx")) or \
                         list(temp_dir.glob("*–ê–•–ß*.xlsx")) or \
                         list(temp_dir.glob("*–†–µ–µ—Å—Ç—Ä*.xlsx")) or \
                         list(temp_dir.glob("*.xlsx"))

        if registry_files:
            registry_path = registry_files[0]
            await update.message.reply_document(document=open(registry_path, 'rb'))
        else:
            await update.message.reply_text("–†–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await cleanup(user_id)
        await start(update, context)
        return UPLOAD_REGISTRY

    elif choice == '–û—Ç–º–µ–Ω–∞':
        await send_logs_and_cleanup(update, context)
        await start(update, context)
        return UPLOAD_REGISTRY

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return MENU


# =============== –ù–û–í–´–ô: –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–ê–ô–õ–û–í (–¢–û–õ–¨–ö–û –°–ë–û–†) ===============

async def file_received(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    action = user_data[user_id]['current_action']
    temp_dir = user_data[user_id]['temp_dir']

    if not update.message.document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return UPLOAD_FILE

    file = update.message.document

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if action == '–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å—á—ë—Ç (PDF)':
        if not file.file_name.lower().endswith('.pdf'):
            await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
            return UPLOAD_FILE
    else:
        allowed_extensions = ('.xls', '.xlsx', '.xlsm', '.xlsb', '.xltx', '.xltm')
        if not any(file.file_name.lower().endswith(ext) for ext in allowed_extensions):
            await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª—ã (.xls*).")
            return UPLOAD_FILE

    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    file_path = temp_dir / file.file_name
    counter = 1
    stem = file_path.stem
    suffix = file_path.suffix
    while file_path.exists():
        file_path = temp_dir / f"{stem}_{counter}{suffix}"
        counter += 1

    # –°–∫–∞—á–∏–≤–∞–µ–º
    try:
        new_file = await file.get_file()
        await new_file.download_to_drive(file_path)
        logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
        await update.message.reply_text(f"–§–∞–π–ª '{file_path.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return UPLOAD_FILE

    # üîπ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–ª—è Excel (1–° –∏ Bitrix)
    if action in SINGLE_FILE_ACTIONS:
        try:
            if action == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ 1–°':
                run_1c_pipeline(str(temp_dir))
            elif action == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç –∏–∑ Bitrix':
                run_bitrix_pipeline(str(temp_dir))

            await update.message.reply_text(
                "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ pipeline: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
            )

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ current_action, temp_dir –æ—Å—Ç–∞—ë—Ç—Å—è
        del user_data[user_id]['current_action']
        return MENU

    # üîπ –î–ª—è PDF ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ UPLOAD_FILE, –∂–¥—ë–º "–ì–æ—Ç–æ–≤–æ"
    return UPLOAD_FILE


# =============== –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: /done ===============

async def done_command(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or 'current_action' not in user_data[user_id]:
        await update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
        return MENU

    action = user_data[user_id]['current_action']
    temp_dir = user_data[user_id]['temp_dir']

    files = list(temp_dir.glob("*.pdf"))
    if not files:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞.")
        return MENU

    try:
        run_invoice_pipeline(str(temp_dir))
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(files)} PDF-—Ñ–∞–π–ª–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ pipeline: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )

    del user_data[user_id]['current_action']
    return MENU


# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===============

async def send_logs_and_cleanup(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_file = "bot_logs.log"
    temp_dir = user_data[user_id].get('temp_dir')

    log_files = []

    if os.path.exists(log_file):
        log_files.append(log_file)

    if temp_dir and os.path.exists(temp_dir):
        log_files.extend([
            os.path.join(temp_dir, f) for f in os.listdir(temp_dir)
            if f.endswith('.log') and os.path.isfile(os.path.join(temp_dir, f))
        ])

    for file_path in log_files:
        try:
            with open(file_path, 'rb') as f:
                await update.message.reply_document(document=f)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {file_path}: {e}")

    if temp_dir and os.path.exists(temp_dir):
        shutil.rmtree(temp_dir, ignore_errors=True)

    user_data.pop(user_id, None)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é.")


async def cleanup(user_id):
    if user_id in user_data:
        temp_dir = user_data[user_id]['temp_dir']
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir, ignore_errors=True)
        user_data.pop(user_id, None)
    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã.")


# =================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===================

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        UPLOAD_REGISTRY: [MessageHandler(filters.Document.ALL, registry_received)],
        MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_choice)],
        UPLOAD_FILE: [
            MessageHandler(filters.Document.ALL, file_received),
            MessageHandler(filters.TEXT & filters.Regex("^–ì–æ—Ç–æ–≤–æ$"), done_command),  # –¢–æ–ª—å–∫–æ –¥–ª—è PDF
        ],
    },
    fallbacks=[
        CommandHandler('start', start),
        CommandHandler('cancel', send_logs_and_cleanup),
    ],
    per_user=True,
)



    app.add_handler(conv_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == '__main__':
    main()